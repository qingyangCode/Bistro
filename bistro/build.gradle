apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.qingyang.bistro"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "MAT_ADVERTISER_ID", "\"23132\""
        buildConfigField "String", "MAT_CONVERSION_ID", "\"9fd337a1392516465a0e1f40e8794c20\""
    }
    signingConfigs {
        debug {
            storeFile file('deploy/debug.keystore')
        }
        release {
            keyAlias 'qingqingworkroom'
            keyPassword 'qingqing123'
            storeFile file('deploy/keystore.jks')
            storePassword 'qingqing123'
        }
    }
    buildTypes {
        debug {
            debuggable true
            buildConfigField "boolean", "ENABLE_CRASH_REPORT", "true"
            buildConfigField "boolean", "ENABLE_DEVMODE", "true"
            buildConfigField "boolean", "ENABLE_LOG", "true"
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "ENABLE_CRASH_REPORT", "false"
            buildConfigField "boolean", "ENABLE_DEVMODE", "false"
            buildConfigField "boolean", "ENABLE_LOG", "false"
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        qiaolepei {
            applicationId 'com.qingyang.qiaolepei'
            buildConfigField "int", "DB_VERSION", "1"
            buildConfigField "int", "LOG_LEVEL", "android.util.Log.VERBOSE"
            buildConfigField "String", "SERVER_URL", "\"http://124.127.106.196:80\""
        }
    }
    useLibrary 'org.apache.http.legacy'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:cardview-v7:+'
    compile 'com.android.support:recyclerview-v7:+'
    compile project(':mainlibrary')
    compile 'com.nineoldandroids:library:2.4.0'
}


def coverageSourceDirs = [
        '/src/main/java'
]


task codeCoverage(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
//    executionData = files('build/jacoco/testDevDebug.exec')

    Map<String, String> renamedFilesMap = [:]

    // Rename files with '$$' before generating report, and then rename back after
    doFirst {
        new File('common/build/intermediates/classes/debug').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                String oldPath = file.path
                String newPath = oldPath.replace('$$', '$')
                file.renameTo(newPath)
                renamedFilesMap[newPath] = oldPath
            }
        }
    }
    doLast {
        renamedFilesMap.each() {
            newPath, oldPath ->
                new File(newPath).renameTo(oldPath)
        }
    }
}
